pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";

contract AgreementContract is ERC1155 {
    uint256 public agreementId;
    mapping(uint256 => Agreement) public agreements;

    // the oracle's and AI's addresses
    address public oracle;
    address public agreementCreator;

    struct Agreement {
        address freelancer;
        address client;
        string agreement;
        bool isFulfilled;
        bool isDisputed;
        bool isAppealed;
        uint256 amount;
        bool oracleConfirmation;
        uint256 disputeEndTime;
        bool releaseFunds;
    }

    constructor(address _oracle, address _agreementCreator) ERC1155("https://your-metadata-uri.com/{id}.json") {
        oracle = _oracle;
        agreementCreator = _agreementCreator;
    }

    function createAgreement(address _freelancer, address _client, string memory _agreement, uint256 _amount) public payable {
        require(msg.value == _amount, "Please provide the correct amount for escrow.");

        agreements[agreementId] = Agreement(_freelancer, _client, _agreement, false, false, false, msg.value, false, 0, false);
        _mint(_freelancer, agreementId, 1, "");
        _mint(_client, agreementId, 1, "");
        agreementId++;
    }

    function amendAgreement(uint256 _agreementId, string memory _newAgreement) public {
        require(msg.sender == agreementCreator, "Only the agreement creator can amend the agreement.");
        require(!agreements[_agreementId].isFulfilled, "The agreement has already been fulfilled.");
        require(!agreements[_agreementId].isDisputed, "The agreement is under dispute.");
        require(!agreements[_agreementId].isAppealed, "The agreement is already appealed.");
        agreements[_agreementId].agreement = _newAgreement;
    }

    function fulfillAgreement(uint256 _agreementId) public {
        require(msg.sender == agreements[_agreementId].freelancer || msg.sender == agreements[_agreementId].client, "Only the freelancer or client can fulfill the agreement.");
        require(!agreements[_agreementId].isDisputed, "The agreement is under dispute.");
        require(agreements[_agreementId].oracleConfirmation, "The terms of the agreement have not been confirmed by the oracle.");
        agreements[_agreementId].isFulfilled = true;
        agreements[_agreementId].releaseFunds = true;
        agreements[_agreementId].disputeEndTime = 0; // Reset the dispute end time
        payable(agreements[_agreementId].freelancer).transfer(agreements[_agreementId].amount);
    }

    function initiateDispute(uint256 _agreementId) public {
        require(msg.sender == agreements[_agreementId].freelancer || msg.sender == agreements[_agreementId].client, "Only the freelancer or client can initiate a dispute.");
        require(!agreements[_agreementId].isFulfilled, "The agreement has already been fulfilled.");
        require(!agreements[_agreementId].isDisputed, "The agreement is under dispute.");
        agreements[_agreementId].isDisputed = true;
        agreements[_agreementId].disputeEndTime = block.timestamp + 168 hours; // Set the dispute end time to 168 hours (1 week) from the current time
        agreements[_agreementId].releaseFunds = false; // Set releaseFunds to false during the dispute period
    } 
    
            function requestAppeal(uint256 _agreementId) public {
        require(agreements[_agreementId].isDisputed, "The agreement is not under dispute.");
        require(agreements[_agreementId].disputeEndTime > block.timestamp, "The dispute period has ended.");
        require(!agreements[_agreementId].isAppealed, "The agreement is already appealed.");
        agreements[_agreementId].isAppealed = true;
    }

    function finalizeAppeal(uint256 _agreementId, bool _isFavorableOutcome) public {
        require(msg.sender == oracle, "Only the oracle can finalize the appeal.");
        require(agreements[_agreementId].isDisputed, "The agreement is not under dispute.");
        require(agreements[_agreementId].isAppealed, "The agreement is not appealed.");
        require(agreements[_agreementId].disputeEndTime > block.timestamp, "The dispute period has ended.");

        // Perform the necessary actions to finalize the appeal and make a new determination
        agreements[_agreementId].isFulfilled = _isFavorableOutcome;
        agreements[_agreementId].releaseFunds = _isFavorableOutcome;

        // Clear the dispute flag and the appeal flag
        agreements[_agreementId].isDisputed = false;
        agreements[_agreementId].isAppealed = false;
        agreements[_agreementId].disputeEndTime = 0; // Reset the dispute end time
    }

    function releaseFunds(uint256 _agreementId) public {
        require(agreements[_agreementId].releaseFunds, "Funds cannot be released at this time.");
        require(agreements[_agreementId].isFulfilled, "The agreement is not fulfilled.");

        // Release funds to the appropriate party
        payable(agreements[_agreementId].freelancer).transfer(agreements[_agreementId].amount);

        // Clear the releaseFunds flag
        agreements[_agreementId].releaseFunds = false;
    }

    function refundFunds(uint256 _agreementId) public {
        require(agreements[_agreementId].releaseFunds, "Funds cannot be refunded at this time.");
        require(!agreements[_agreementId].isFulfilled, "The agreement is already fulfilled.");

        // Refund funds to the client
        payable(agreements[_agreementId].client).transfer(agreements[_agreementId].amount);

        // Clear the releaseFunds flag
        agreements[_agreementId].releaseFunds = false;
    }
}
